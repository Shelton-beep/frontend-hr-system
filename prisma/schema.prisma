datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id               String    @id @default(uuid()) @map("_id")
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?

  role             String?   @default("user")
  gender           String?
  dateOfBirth      DateTime?
  nationality      String?
  nationalIdNumber String?
  maritalStatus    String?
  religion         String?
  profileComplete  Boolean?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  authenticators   Authenticator[]
}
 
model Account {
  id                String   @id @default(uuid()) @map("_id")
  userId            String   
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String    @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  id         String    @id @default(uuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
 
  @@unique([identifier, token])
}
 
model Authenticator {
  credentialID         String   @id @map("_id")
  userId               String   
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Job {
  id                String        @id @default(uuid())  @map("_id")
  title             String
  description       String
  jobLocation       String
  jobType           String
  requirements      Requirement[]
  grade             String
  keyOutputs        KeyOutput[]
  skills            Skill[]
  applicationDeadline DateTime?
  isActive          Boolean
  createdAt         DateTime
  
  @@map("jobs") // Optional: Maps this model to a specific collection/table in MongoDB
}

model Requirement {
  id          String   @id @default(uuid()) @map("_id")
  description String
  job         Job      @relation(fields: [jobId], references: [id], onDelete:Cascade)
  jobId       String
}

model KeyOutput {
  id                String   @id @default(uuid()) @map("_id")
  outputDescription String
  job               Job      @relation(fields: [jobId], references: [id], onDelete:Cascade)
  jobId             String
}

model Skill {
  id          String   @id @default(uuid()) @map("_id")
  description String
  job         Job      @relation(fields: [jobId], references: [id], onDelete:Cascade)
  jobId       String
}

